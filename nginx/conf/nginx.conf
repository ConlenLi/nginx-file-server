
user  root;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    server {
        listen       8090;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        client_max_body_size 1024M;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        
    #配置文件读取路径
    location ~ .*\.(html|gif|jpg|jpeg|bmp|png|ico|txt|js|css|docx|doc|xlsx|xls|ppt|pptx|mp3|mp4|flv|mov)$  { 
        root /opt/uploadStore/;
        #expires定义用户浏览器缓存的时间为7天，如果静态页面不常更新，可以设置更长，这样可以节省带宽和缓解服务器的压力
    } 

         #nginx 上传模块的配置
        location = /upload {
            add_header 'Access-Control-Allow-Origin' '*';
	    add_header 'Access-Control-Allow-Methods' 'GET,HEAD,PUT,POST,DELETE';
            add_header 'Access-Control-Allow-Headers' 'token';
	    # 处理上传后的请求转发到此接口
            upload_pass   @uploadServer;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store  /usr/tmp/ngx_store;

            # Allow uploaded files to be read only by user
            upload_store_access user:r;

            # 开启断点续传
            upload_resumable on;
            
            # 设置断点续传状态文件存储的目录
            upload_state_store /usr/tmp/upload_temp;

            # Set specified fields in request body
            upload_set_form_field "fileName" $upload_file_name;
            upload_set_form_field "fileType" $upload_content_type;
            upload_set_form_field "filePath" $upload_tmp_path;
            
            # Inform backend about hash and size of a file
            upload_aggregate_form_field "fileMD5" $upload_file_md5;
            upload_aggregate_form_field "fileSize" $upload_file_size;
            
            upload_pass_form_field "^.*$";
            
            # 当后续处理接口返回400-500的状态码则删除上传的文件
            upload_cleanup 400 404 499 500-505;
        }

      location @uploadServer {
            lua_need_request_body on;   
            content_by_lua_file lua/upload.lua;
       }

	# 删除文件服务器文件
       location  =/remove {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET,HEAD,PUT,POST,DELETE';
		add_header 'Access-Control-Allow-Headers' 'token';
		content_by_lua_file lua/remove.lua;
	}
       
	#后端处理程序配置文件	
	include upload_callback.conf;
	
	error_page   500 502 503 504  /50x.html;
      	location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
